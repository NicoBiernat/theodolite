// Inherited to all subprojects
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    jcenter()
  }
  dependencies {
    classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.3"
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
  }
}

// Variables used to distinct different subprojects
def useCaseProjects = subprojects.findAll {it -> it.name.matches('uc(.)*')}
def commonProjects = subprojects.findAll {it -> it.name.matches('(.)*commons(.)*')}


// Plugins
allprojects {
  apply plugin: 'eclipse'
}

subprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'java-library'
}

configure(useCaseProjects){
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    applicationDefaultJvmArgs = ["-Dlog4j.configuration=log4j.properties"]
}

ext {
    flinkVersion = '1.10.1'
    scalaBinaryVersion = '2.12'
}

// Java version for all subprojects
subprojects {
  java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Check for updates every build
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// Repositories for all projects
allprojects {
	repositories {
	    jcenter()
	    maven {
	    	url "https://oss.sonatype.org/content/repositories/snapshots/"
            "https://repository.apache.org/content/repositories/snapshots/"
	    }
        mavenCentral()
	}
}

// Dependencies for all use cases
configure(useCaseProjects) {
  dependencies {
      // These dependencies is exported to consumers, that is to say found on their compile classpath.
      api('org.industrial-devops:titan-ccp-common:0.0.3-SNAPSHOT') { changing = true }
      api 'net.kieker-monitoring:kieker:1.14-SNAPSHOT'
      api 'net.sourceforge.teetime:teetime:3.0'

      // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
      implementation 'org.apache.kafka:kafka-clients:2.1.0'
      implementation 'com.google.guava:guava:24.1-jre'
      implementation 'org.jctools:jctools-core:2.1.1'
      implementation 'org.slf4j:slf4j-simple:1.6.1'
      implementation project(':application-kafkastreams-commons')

      compile group: 'org.apache.flink', name: 'flink-java', version: "${flinkVersion}"
      compile group: 'org.apache.flink', name: "flink-streaming-java_${scalaBinaryVersion}", version:"${flinkVersion}"
      compile group: 'org.apache.flink', name: "flink-table-api-java-bridge_${scalaBinaryVersion}", version: "${flinkVersion}"
      compile group: 'org.apache.flink', name: "flink-table-planner_${scalaBinaryVersion}", version: "${flinkVersion}"
      compile group: 'org.apache.flink', name: "flink-connector-kafka_${scalaBinaryVersion}", version: "${flinkVersion}"
      compile group: 'org.apache.flink', name: 'flink-avro', version: '1.10.1'
      compile group: 'org.industrial-devops', name: 'titan-ccp-common', version: '0.0.3-SNAPSHOT'

      // Use JUnit test framework
      testImplementation 'junit:junit:4.12'
  }

  run.classpath = sourceSets.main.runtimeClasspath

  jar {
      manifest {
          attributes 'Built-By': System.getProperty('user.name'),
                     'Build-Jdk': System.getProperty('java.version')
      }
  }

  shadowJar {
      configurations = [project.configurations.compile]
  }
}

// Dependencies for all commons
configure(commonProjects) {
  dependencies {
      // These dependencies is exported to consumers, that is to say found on their compile classpath.
      api 'org.apache.kafka:kafka-clients:2.4.0'

      // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
      implementation 'org.slf4j:slf4j-simple:1.6.1'
      implementation('org.industrial-devops:titan-ccp-common:0.0.3-SNAPSHOT') { changing = true }

      // Use JUnit test framework
      testImplementation 'junit:junit:4.12'
  }
}

// Per default XML reports for SpotBugs are generated
// Include this to generate HTML reports
tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    // Either HTML or XML reports can be activated
    html.enabled true
    xml.enabled false
  }
}

// Subprojects quality tools tasks
subprojects {
  task pmd {
    group 'Quality Assurance'
    description 'Run PMD'

    dependsOn 'pmdMain'
    dependsOn 'pmdTest'
  }

  task checkstyle {
    group 'Quality Assurance'
    description 'Run Checkstyle'

    dependsOn 'checkstyleMain'
    dependsOn 'checkstyleTest'
  }

  task spotbugs {
    group 'Quality Assurance'
    description 'Run SpotBugs'

    dependsOn 'spotbugsMain'
    dependsOn 'spotbugsTest'
  }
}

// Subprojects quality tools configuration
subprojects {
  pmd {
    ruleSets = [] // Gradle requires to clean the rule sets first
    ruleSetFiles = files("$rootProject.projectDir/config/pmd.xml")
    ignoreFailures = true
    toolVersion = "6.7.0"
  }

  checkstyle {
    configDirectory = file("$rootProject.projectDir/config")
    configFile = file("$rootProject.projectDir/config/checkstyle.xml")
    maxWarnings = 0
    ignoreFailures = true
    toolVersion = "8.12"
  }

  spotbugs {
    excludeFilter = file("$rootProject.projectDir/config/spotbugs-exclude-filter.xml")
    reportLevel = "low"
    effort = "max"
    ignoreFailures = true
    toolVersion = '3.1.7'
  }
}

allprojects {
  eclipse {
      classpath {
         downloadSources=true
         downloadJavadoc=true
      }
  }
}
