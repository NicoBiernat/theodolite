image: openjdk:11-jdk

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

cache:
  paths:
    - .gradle

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

stages:
  - build
  - test
  - check
  - deploy

build:
  stage: build
  tags:
    - exec-docker
  script: ./gradlew --build-cache assemble
  artifacts:
    paths:
      - "uc1-application/build/libs/uc1-application-all.jar"
      - "uc1-workload-generator/build/distributions/uc1-workload-generator.tar"
      - "uc2-application/build/libs/uc2-application-all.jar"
      - "uc2-workload-generator/build/distributions/uc2-workload-generator.tar"
      - "uc3-application/build/libs/uc3-application-all.jar"
      - "uc3-workload-generator/build/distributions/uc3-workload-generator.tar"
      - "uc4-application/build/libs/uc4-application-all.jar"
      - "uc4-workload-generator/build/distributions/uc4-workload-generator.tar"
    expire_in: 1 day

.test:
  stage: test
  tags:
    - exec-docker
  script: ./gradlew test --continue
  artifacts:
    reports:
      junit:
        - "**/build/test-results/test/TEST-*.xml"

.checkstyle:
  stage: check
  tags:
    - exec-docker
  script: ./gradlew checkstyle --continue
  allow_failure: true
  artifacts:
    paths:
      - "*/build/reports/checkstyle/main.html"
    when: on_failure
    expire_in: 1 day

.pmd:
  stage: check
  tags:
    - exec-docker
  script: ./gradlew pmd --continue
  allow_failure: true
  artifacts:
    paths:
      - "*/build/reports/pmd/*.html"
    when: on_failure
    expire_in: 1 day

.spotbugs:
  stage: check
  tags:
    - exec-docker
  script: ./gradlew spotbugs --continue
  allow_failure: true
  artifacts:
    paths:
      - "*/build/reports/spotbugs/*.html"
    when: on_failure
    expire_in: 1 day

.deploy:
  stage: deploy
  tags:
    - exec-dind
  # see https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  # for image usage and settings for building with TLS and docker in docker
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  cache: {}
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker build --pull -t $DOCKERHUB_ID/$IMAGE_NAME:latest ./$JAVA_PROJECT_NAME
    - echo $DOCKERHUB_PW | docker login -u $DOCKERHUB_ID --password-stdin
    - docker push $DOCKERHUB_ID/$IMAGE_NAME:latest
    - docker logout
  only:
    variables:
      - $DOCKERHUB_ID
      - $DOCKERHUB_PW

deploy-uc1-flink-app:
  extends: .deploy
  variables:
    IMAGE_NAME: "theodolite-flink-uc1"
    JAVA_PROJECT_NAME: "uc1-application"

deploy-uc3-flink-app:
  extends: .deploy
  variables:
    IMAGE_NAME: "theodolite-flink-uc3"
    JAVA_PROJECT_NAME: "uc3-application"

deploy-uc4-flink-app:
  extends: .deploy
  variables:
    IMAGE_NAME: "theodolite-flink-uc4"
    JAVA_PROJECT_NAME: "uc4-application"